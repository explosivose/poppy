doctype html
html(lang="en" data-theme="light")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title= title
    link(href="https://cdn.jsdelivr.net/npm/daisyui@4.12.14/dist/full.min.css" rel="stylesheet")
    script(src="https://cdn.tailwindcss.com")
    link(href="https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.css" rel="stylesheet")
    script(src="https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.js")
    script(defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js")
    style.
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
  body
    #map
    script(src="/js/map-alpine.js")
    script.
      window.vehiclesData = !{vehicles};
      window.parkingZonesData = !{parkingZones};
    .card.w-96.bg-base-100.shadow-xl.absolute.top-4.right-4.z-10(
      x-data="journeyPlanner()"
      x-init="initMap()"
    )
      .card-body
        h2.card-title Journey Planner

        .alert.alert-info.text-sm
          span Click on the map to add journey legs. Each leg needs a start and end point.

        .overflow-y-auto.max-h-64.space-y-2(x-show="legs.length > 0 || currentLeg.start")
          template(x-for="(leg, index) in legs" :key="index")
            .card.bg-base-200.shadow-sm
              .card-body.p-3
                .flex.justify-between.items-start.mb-2
                  .font-semibold.text-sm
                    | Leg
                    span(x-text="index + 1")
                  button.btn.btn-xs.btn-ghost(@click="editLegTime(index)")
                    | ⏱️ Edit
                .text-xs.space-y-1
                  div
                    | Start:
                    span(x-text="leg.startCoord.lat.toFixed(4)")
                    | °,
                    span(x-text="leg.startCoord.lng.toFixed(4)")
                    | °
                  div.text-info(x-show="leg.startTime")
                    | 🕒
                    span(x-text="formatTime(leg.startTime)")
                  div
                    | End:
                    span(x-text="leg.endCoord.lat.toFixed(4)")
                    | °,
                    span(x-text="leg.endCoord.lng.toFixed(4)")
                    | °
                  div.text-info(x-show="leg.endTime")
                    | 🕒
                    span(x-text="formatTime(leg.endTime)")
                  template(x-if="leg.paths")
                    .divider.my-1
                  template(x-if="leg.paths")
                    .space-y-1
                      template(x-for="path in leg.paths")
                        .flex.items-center.gap-2.text-xs
                          span(x-text="path.mode === 'walk' ? '🚶' : '🚗'")
                          .badge.badge-sm(x-text="path.mode")
                          span.opacity-70
                            span(x-text="Math.round(path.distance)")
                            | m
                  template(x-if="leg.estimatedPrice")
                    .divider.my-1
                  template(x-if="leg.estimatedPrice")
                    .bg-success.bg-opacity-10.p-2.rounded.text-xs
                      .font-semibold.text-success
                        | 💰 €
                        span(x-text="(leg.estimatedPrice / 100).toFixed(2)")
                      div(class="mt-1 space-y-0.5 text-xs opacity-70")
                        div(x-show="leg.priceBreakdown?.unlockFee")
                          | 🔓 Unlock: €
                          span(x-text="(leg.priceBreakdown.unlockFee / 100).toFixed(2)")
                        div(x-show="leg.priceBreakdown?.bookUnitPrice")
                          | 📅 Booking: €
                          span(x-text="(leg.priceBreakdown.bookUnitPrice / 100).toFixed(2)")
                        div(x-show="leg.priceBreakdown?.minutePrice")
                          | ⏱️ Driving: €
                          span(x-text="(leg.priceBreakdown.minutePrice / 100).toFixed(2)")
                        div(x-show="leg.priceBreakdown?.kilometerPrice")
                          | 📏 Distance: €
                          span(x-text="(leg.priceBreakdown.kilometerPrice / 100).toFixed(2)")
                        div(x-show="leg.priceBreakdown?.pauseUnitPrice")
                          | ⏸️ Pause: €
                          span(x-text="(leg.priceBreakdown.pauseUnitPrice / 100).toFixed(2)")


          template(x-if="currentLeg.start && !currentLeg.end")
            .alert.alert-warning.text-xs
              div
                .font-semibold Current Leg (incomplete)
                div
                  | Start:
                  span(x-text="currentLeg.start[1].toFixed(4)")
                  | °
                .italic.mt-1 Click on map to set end point

        template(x-if="totalPrice > 0")
          .alert.alert-success.text-sm
            div
              .font-bold Total Price
              .text-lg
                | €
                span(x-text="(totalPrice / 100).toFixed(2)")

        .card-actions.flex-col.w-full
          button.btn.btn-primary.w-full(
            @click="planJourney()"
            :disabled="legs.length === 0 || loading"
            :class="{ 'loading': loading }"
          )
            span(x-text="loading ? 'Planning...' : 'Plan Journey'")

          button.btn.btn-ghost.w-full(@click="clearAll()") Clear All

        template(x-if="error")
          .alert.alert-error.text-sm
            span(x-text="error")

      dialog.modal(:class="{'modal-open': showTimeModal}" @click.self="showTimeModal = false")
        .modal-box
          h3.font-bold.text-lg Edit Leg Times
          .py-4.space-y-4(x-show="editingLegIndex !== null")
            .form-control
              label.label
                span.label-text Start Time
              input.input.input-bordered(
                type="datetime-local"
                x-model="tempStartTime"
              )
            .form-control
              label.label
                span.label-text End Time
              input.input.input-bordered(
                type="datetime-local"
                x-model="tempEndTime"
              )
          .modal-action
            button.btn(@click="showTimeModal = false") Cancel
            button.btn.btn-primary(@click="saveLegTime()") Save
